
# We generate a species tree
sptree = readTrees("sptree-10taxa.nw")[1]
species = sptree.taxa()

l <- 0.3
m <- 0.2
r <- 1.0
T <- 1.0

tree_dist = dnBDP(
    lambda=l, mu=m, rho=r, rootAge=T, 
    samplingStrategy="uniform",
    condition="nTaxa", taxa=species)

ingroup <- clade(["A", "B", "C", "D", "E", "F", "G", "H", "I"])
timetree ~ dnConstrainedTopology(tree_dist, [ingroup])

writeNexus(timetree, "sptree-01.nex")

# In RevBayes, the multispecies coalescent is defined in the context
# of a timetree. The time-scale branch length is computed from the
# timetree (difference of node ages), then the theta parameter is
# obtained as 1/Ne, where Ne is the parameter we set in the model for
# each branch. The coalescent rate lambda is `theta * k(k-1)/2`

# Keep in mind that a branch of the phylogeny is shorter on a
# coalescent scale the larger the Ne for that branch. A huge Ne,
# implies that the expected time to coalescence is very long, so if we
# consider two branches with the same length on a calendar time scale,
# but with the first having Ne which is twice the other, the first
# will have half the coalescent branch length, and a larger
# probability of deep coalescence. In other words, when all
# populations in a tree have the same population size, but we estimate 
# branch-specific estimates values for Ne=1/theta, the theta values 
# should be proportional to the branch lengths on a calendar time
# scale.

# We'd like to simulate rooted gene trees, so we set the coalescent
# branch length to inf (Ne = 0) for the branch leading to the ingroup
# crown.
Ne <- rep(0.01, 19)
Ne[18] <- 0.
gene_dist = dnMultiSpeciesCoalescent(timetree, Ne, species)
N <- 500
for (i in 1:N){
    gene_trees[i] ~ gene_dist 
}
writeNexus(gene_trees, "genetrees-01.nex")

for (i in 1:N){
    clock_rate[i] ~ dnExponential(0.5)
    alpha[i] ~ dnExponential()
    sr[i] := fnDiscretizeGamma(alpha[i], alpha[i], 20)
    er_prior <- v(1,1,1,1,1,1)  # what's the order here? Why Dirichlet?
    er[i] ~ dnDirichlet(er_prior)
    pi_prior <- v(5,5,5,5)  # lower seems very unrealistic 
    pi[i] ~ dnDirichlet(pi_prior)
    Q[i] := fnGTR(er[i], pi[i])
    seqlen[i] ~ dnUniformNatural(100,900)
    seq_ctmc[i] ~ dnPhyloCTMC(
            tree=gene_trees[i],
            Q=Q[i],
            branchRates=clock_rate[i],
            siteRates=sr[i],
            nSites=seqlen[i],
            type="DNA")
    writeFasta("alns-01/" + i + ".fasta", seq_ctmc[i])
}

